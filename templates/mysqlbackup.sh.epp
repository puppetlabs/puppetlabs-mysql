<%- if $kernel == 'Linux' { -%>
#!/bin/bash
<%- } else { -%>
#!/bin/sh
<%- } -%>
#
# MySQL Backup Script
#  Dumps mysql databases to a file for another backup tool to pick up.
#
# MySQL code:
# GRANT SELECT, RELOAD, LOCK TABLES ON *.* TO 'user'@'localhost'
# IDENTIFIED BY 'password';
# FLUSH PRIVILEGES;
#
##### START CONFIG ###################################################

USER=<%= $backupuser %>
PASS='<%= $backuppassword_unsensitive %>'
MAX_ALLOWED_PACKET=<%= $maxallowedpacket %>
DIR=<%= $backupdir %>
ROTATE=<%= [ Integer($backuprotate) - 1, 0 ].max %>

# Create temporary mysql cnf file.
TMPFILE=`mktemp /tmp/backup.XXXXXX` || exit 1
echo -e "[client]\npassword=$PASS\nuser=$USER\nmax_allowed_packet=$MAX_ALLOWED_PACKET" > $TMPFILE

<% if $prescript { -%>
<%- [$prescript].flatten().filter |$value| {$value}.each |$script| { %>
<%= $script %>
<%- } -%>
<% } -%>

# Ensure backup directory exist.
mkdir -p $DIR

PREFIX=mysql_backup_
<% if $ignore_events { %>
ADDITIONAL_OPTIONS="--ignore-table=mysql.event"
<% } else { %>
ADDITIONAL_OPTIONS="--events"
<% } %>

<%# Only include routines or triggers if we're doing a file per database -%>
<%# backup. This happens if we named databases, or if we explicitly set -%>
<%# file per database mode -%>
<% if !$backupdatabases.empty or $file_per_database { -%>
<% if $include_triggers { -%>
ADDITIONAL_OPTIONS="$ADDITIONAL_OPTIONS --triggers"
<% } else { -%>
ADDITIONAL_OPTIONS="$ADDITIONAL_OPTIONS --skip-triggers"
<% } -%>
<% if $include_routines { -%>
ADDITIONAL_OPTIONS="$ADDITIONAL_OPTIONS --routines"
<% } else { -%>
ADDITIONAL_OPTIONS="$ADDITIONAL_OPTIONS --skip-routines"
<% } -%>
<% } -%>

<%- if $optional_args and type($optional_args) =~ Type(Array) { -%>
<% $optional_args.each |$arg| { -%>
ADDITIONAL_OPTIONS="$ADDITIONAL_OPTIONS <%= $arg %>"
<%- } -%>
<%- } -%>
##### STOP CONFIG ####################################################
PATH=<%= $execpath %>

<%- if $kernel == 'Linux' { -%>
set -o pipefail
<%- } -%>



cleanup()
{
	find "${DIR}/" -maxdepth 1 -type f -name "${PREFIX}*.sql*" -mtime +${ROTATE} -print0 | xargs -0 -r rm -f
}

<% if $delete_before_dump { -%>
cleanup

<% } -%>
<% if $backupdatabases.empty { -%>
<% if $file_per_database { -%>
<% if $excludedatabases.empty { -%>
mysql --defaults-extra-file=$TMPFILE -s -r -N -e 'SHOW DATABASES' | while read dbname
<%} else {-%>
mysql --defaults-extra-file=$TMPFILE -s -r -N -e 'SHOW DATABASES' | grep -v '^\(<%= $excludedatabases.join('\\|') %>\)$' | while read dbname
<% } -%>
do
  <%= $backupmethod %> --defaults-extra-file=$TMPFILE --opt --flush-logs --single-transaction \
    ${ADDITIONAL_OPTIONS} \
    ${dbname} <% if $backupcompress { %>| <%= $compression_command %> <% } %>> ${DIR}/${PREFIX}${dbname}_`date +%Y%m%d-%H%M%S`.sql<% if $backupcompress { %><%= $compression_extension %><% }  %>
done
<% } else { -%>
<%= $backupmethod %> --defaults-extra-file=$TMPFILE --opt --flush-logs --single-transaction \
 ${ADDITIONAL_OPTIONS} \
 --all-databases <% if $backupcompress { %>| <%= $compression_command %> <% } %>> ${DIR}/${PREFIX}`date +%Y%m%d-%H%M%S`.sql<% if $backupcompress { %><%= $compression_extension %><% }  %>
<% } -%>
<% } else { -%>
<% $backupdatabases.each |$db| { -%>
<%= $backupmethod %> --defaults-extra-file=$TMPFILE --opt --flush-logs --single-transaction \
    ${ADDITIONAL_OPTIONS} \
 <%= $db %><% if $backupcompress { %>| <%= $compression_command %> <% } %>> ${DIR}/${PREFIX}<%= $db %>_`date +%Y%m%d-%H%M%S`.sql<% if $backupcompress { %><%= $compression_extension %><% }  %>
<% } -%>
<% } -%>

<% unless $delete_before_dump { -%>
if [ $? -eq 0 ] ; then
    cleanup
    touch <%= $backup_success_file_path %>
fi
<% } -%>

<% if $postscript { -%>
  <%- [$postscript].flatten().filter |$value| { $value }.each |$script| { %>
<%= $script %>
  <%- } -%>
<% } -%>

# Remove temporary file
rm -f $TMPFILE
